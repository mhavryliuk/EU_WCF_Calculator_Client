//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace _20180412_WCF_Calculator_Client.RemoteCalculator {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RemoteCalculator.ICalculator")]
    public interface ICalculator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/TestConnection", ReplyAction="http://tempuri.org/ICalculator/TestConnectionResponse")]
        string TestConnection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/TestConnection", ReplyAction="http://tempuri.org/ICalculator/TestConnectionResponse")]
        System.Threading.Tasks.Task<string> TestConnectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/AddNumber", ReplyAction="http://tempuri.org/ICalculator/AddNumberResponse")]
        double AddNumber(double number1, double number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/AddNumber", ReplyAction="http://tempuri.org/ICalculator/AddNumberResponse")]
        System.Threading.Tasks.Task<double> AddNumberAsync(double number1, double number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/SubNumber", ReplyAction="http://tempuri.org/ICalculator/SubNumberResponse")]
        double SubNumber(double number1, double number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/SubNumber", ReplyAction="http://tempuri.org/ICalculator/SubNumberResponse")]
        System.Threading.Tasks.Task<double> SubNumberAsync(double number1, double number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/MultNumber", ReplyAction="http://tempuri.org/ICalculator/MultNumberResponse")]
        double MultNumber(double number1, double number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/MultNumber", ReplyAction="http://tempuri.org/ICalculator/MultNumberResponse")]
        System.Threading.Tasks.Task<double> MultNumberAsync(double number1, double number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/DivNumber", ReplyAction="http://tempuri.org/ICalculator/DivNumberResponse")]
        double DivNumber(double number1, double number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/DivNumber", ReplyAction="http://tempuri.org/ICalculator/DivNumberResponse")]
        System.Threading.Tasks.Task<double> DivNumberAsync(double number1, double number2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorChannel : _20180412_WCF_Calculator_Client.RemoteCalculator.ICalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorClient : System.ServiceModel.ClientBase<_20180412_WCF_Calculator_Client.RemoteCalculator.ICalculator>, _20180412_WCF_Calculator_Client.RemoteCalculator.ICalculator {
        
        public CalculatorClient() {
        }
        
        public CalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string TestConnection() {
            return base.Channel.TestConnection();
        }
        
        public System.Threading.Tasks.Task<string> TestConnectionAsync() {
            return base.Channel.TestConnectionAsync();
        }
        
        public double AddNumber(double number1, double number2) {
            return base.Channel.AddNumber(number1, number2);
        }
        
        public System.Threading.Tasks.Task<double> AddNumberAsync(double number1, double number2) {
            return base.Channel.AddNumberAsync(number1, number2);
        }
        
        public double SubNumber(double number1, double number2) {
            return base.Channel.SubNumber(number1, number2);
        }
        
        public System.Threading.Tasks.Task<double> SubNumberAsync(double number1, double number2) {
            return base.Channel.SubNumberAsync(number1, number2);
        }
        
        public double MultNumber(double number1, double number2) {
            return base.Channel.MultNumber(number1, number2);
        }
        
        public System.Threading.Tasks.Task<double> MultNumberAsync(double number1, double number2) {
            return base.Channel.MultNumberAsync(number1, number2);
        }
        
        public double DivNumber(double number1, double number2) {
            return base.Channel.DivNumber(number1, number2);
        }
        
        public System.Threading.Tasks.Task<double> DivNumberAsync(double number1, double number2) {
            return base.Channel.DivNumberAsync(number1, number2);
        }
    }
}
